version: "3.9"
services:
  traefik:
    image: traefik:v2.5

    configs:
      - source: traefik-config-dynamic.yml
        target: /etc/traefik/configs/dynamic.yml
      - source: traefik-config-static.yml
        target: /etc/traefik/traefik.yml

    secrets: *service-secrets

    # healthcheck:
    #   test: wget --spider http://localhost:8082/ping
    #   test: curl --fail -s https://traefik.${SWARM_HOST}/ || exit 1
    #   interval: 10s
    #   timeout: 5s
    #   retries: 3
    #   start_period: 5s

    networks:
      - traefik-network

    volumes:
      - /var/run/docker.sock:/var/run/docker.sock
      - traefik-public-certificates:/certificates

    ports:
      - target: 80
        published: 80
        mode: host
      - target: 443
        published: 443
        mode: host

    deploy:
      labels:
        - "traefik.enable=true"
        - "traefik.constraint-label=traefik-public"

        - "traefik.http.services.traefik.loadbalancer.server.port=8080"

        - "traefik.http.middlewares.https-redirect.redirectscheme.scheme=https"
        - "traefik.http.middlewares.https-redirect.redirectscheme.permanent=true"

        - "traefik.http.routers.traefik-public-http.entrypoints=http"
        - "traefik.http.routers.traefik-public-http.rule=Host(`traefik.${SWARM_HOST}`)"
        - "traefik.http.routers.traefik-public-http.middlewares=https-redirect"

        - "traefik.http.routers.traefik-public-https.entrypoints=https"
        - "traefik.http.routers.traefik-public-https.rule=Host(`traefik.${SWARM_HOST}`)"
        - *tls-label
        - "traefik.http.routers.api.service=api@internal"

networks:
  traefik-network:
    external: true

configs:
  traefik-config-dynamic.yml:
    external: true
  traefik-config-static.yml:
    external: true

volumes:
  # Create a volume to store certificates created by Let's Encrypt
  # Use a constraint to make sure Traefik is always deployed to the same Docker node with the same volume containing
  # the HTTPS certificates
  traefik-public-certificates:
