version: "3.9"
x-logging: &default-logging
  driver: json-file
  options:
    tag: "{{.Name}}"
x-env-file:
  env_file: &default-env-file swarm/local/temp/.env.${STACK}
networks:
  internal:
    driver: overlay # Note: same as default network, defined explicitly for readability
  traefik-network:
    external: true
services:
  db:
    image: ${REGISTRY_PREFIX}postgres:14.1
    command: -p ${POSTGRES_PORT}
    volumes:
      - ./db/init:/docker-entrypoint-initdb.d
    networks:
      - internal
    env_file: *default-env-file
    logging: *default-logging

  api:
    image: ${REGISTRY_PREFIX}xpqf_greeter_api:${TAG}
    networks:
      - internal
      - traefik-network
    env_file: *default-env-file
    logging: *default-logging
    deploy:
      labels:
        - "traefik.enable=true"
        - "traefik.constraint-label=traefik-public"
        - "traefik.docker.network=traefik-network" # ensure that traefik picks the right network of the two
        # Route HTTP to HTTPS
        - "traefik.http.routers.${STACK}-api-http.entrypoints=http"
        - "traefik.http.routers.${STACK}-api-http.rule=Host(`${STACK}-api.${SWARM_HOST}`)"
        - "traefik.http.routers.${STACK}-api-http.middlewares=https-redirect"
        # Route HTTPS to service
        - "traefik.http.routers.${STACK}-api-https.entrypoints=https"
        - "traefik.http.routers.${STACK}-api-https.rule=Host(`${STACK}-api.${SWARM_HOST}`)"
        - "traefik.http.routers.${STACK}-api-https.tls=true"
        - "traefik.http.services.${STACK}-api-https.loadbalancer.server.port=${API_PORT}"
  app:
    image: ${REGISTRY_PREFIX}xpqf_greeter_app:${TAG}
    networks:
      - traefik-network
    env_file: *default-env-file
    logging: *default-logging
    deploy:
      labels:
        - "traefik.enable=true"
        - "traefik.constraint-label=traefik-public"
        # Route HTTP to HTTPS
        - "traefik.http.routers.${STACK}-app-http.entrypoints=http"
        - "traefik.http.routers.${STACK}-app-http.rule=Host(`${STACK}-app.${SWARM_HOST}`)"
        - "traefik.http.routers.${STACK}-app-http.middlewares=https-redirect"
        # Route HTTPS to service
        - "traefik.http.routers.${STACK}-app-https.entrypoints=https"
        - "traefik.http.routers.${STACK}-app-https.rule=Host(`${STACK}-app.${SWARM_HOST}`)"
        - "traefik.http.routers.${STACK}-app-https.tls=true"
        - "traefik.http.services.${STACK}-app-https.loadbalancer.server.port=80"
